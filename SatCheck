from math import *

pos=(30,30,20)
sat_poss=(
((15,15,2000),(30,30,2000),(45,45,2000),(90,90,2000),(135,135,2000)),
((15,15,2000),(30,30,2000),(45,45,2000),(90,90,2000),(135,135,2000)),
((15,15,2000),(30,30,2000),(45,45,2000),(90,90,2000),(135,135,2000)),
((15,15,2000),(30,30,2000),(45,45,2000),(90,90,2000),(135,135,2000)),
((15,15,2000),(30,30,2000),(45,45,2000),(90,90,2000),(135,135,2000)),
((15,15,2000),(30,30,2000),(45,45,2000),(90,90,2000),(135,135,2000)),
((15,15,2000),(30,30,2000),(45,45,2000),(90,90,2000),(135,135,2000)),
((15,15,2000),(30,30,2000),(45,45,2000),(90,90,2000),(135,135,2000)),
((15,15,2000),(30,30,2000),(45,45,2000),(90,90,2000),(135,135,2000)),
((15,15,2000),(30,30,2000),(45,45,2000),(90,90,2000),(135,135,2000)),
((15,15,2000),(30,30,2000),(45,45,2000),(90,90,2000),(135,135,2000)),
((15,15,2000),(30,30,2000),(45,45,2000),(90,90,2000),(135,135,2000)),
((15,15,2000),(30,30,2000),(45,45,2000),(90,90,2000),(135,135,2000)),
((15,15,2000),(30,30,2000),(45,45,2000),(90,90,2000),(135,135,2000)),
((15,15,2000),(30,30,2000),(45,45,2000),(90,90,2000),(135,135,2000)),
((15,15,2000),(30,30,2000),(45,45,2000),(90,90,2000),(135,135,2000)),
((15,15,2000),(30,30,2000),(45,45,2000),(90,90,2000),(135,135,2000)),
((15,15,2000),(30,30,2000),(45,45,2000),(90,90,2000),(135,135,2000)),
((15,15,2000),(30,30,2000),(45,45,2000),(90,90,2000),(135,135,2000)),
((15,15,2000),(30,30,2000),(45,45,2000),(90,90,2000),(135,135,2000)),
((15,15,2000),(30,30,2000),(45,45,2000),(90,90,2000),(135,135,2000)),
((15,15,2000),(30,30,2000),(45,45,2000),(90,90,2000),(135,135,2000)),
((15,15,2000),(30,30,2000),(45,45,2000),(90,90,2000),(135,135,2000)),
((15,15,2000),(30,30,2000),(45,45,2000),(90,90,2000),(135,135,2000)),
)
vis_sat=[[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]]

def UpdateSatPos():
    #be will add this function when we get access to gps satellites locations
    pass

def CheckPos(pos1, sat_pos) -> bool:
    if (2 * pos1[0] * (sat_pos[0] - pos1[0]) + 2 * pos1[1] * (sat_pos[1] - pos1[1]) + 2 * pos1[2] * (
            sat_pos[2] - pos1[2])) > 0:
        return True
    else:
        return False

def ConvertToXYZ(long, lat, radius):
    return ((radius * cos(long) * cos(lat)), (radius * cos(lat) * sin(long)), (radius * sin(lat)))

def PrintMost():
    most=[]
    for i in vis_sat:
        most.append(len(i))
    print(most)

for time in range(0,23):
    posxyz=ConvertToXYZ(pos[0],pos[1],pos[2])
    for i in sat_poss[time]:
        if CheckPos(posxyz, ConvertToXYZ(i[0],i[1],i[2]))==True:
            vis_sat[time].append(ConvertToXYZ(i[0],i[1],i[2]))
            
print(vis_sat)
PrintMost()
